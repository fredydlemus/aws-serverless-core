AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: compare-yourself-app

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Auth:
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        Authorizers:
          MyLambdaTokenAuthorizer:
            FunctionArn: !GetAtt cyCustomAuthFunction.Arn
            FunctionPayloadType: TOKEN
            Identity:
              Header: Authorization
              ReauthorizeEvery: 300
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: !Sub ${AWS::StackName}
          version: 1.0.0
        x-amazon-apigateway-request-validators:
          ValidateParams:
            validateRequestParameters: true
            ValidateRequestBody: false
          ValidateBody:
            validateRequestParameters: false
            validateRequestBody: true
        paths:
          /compare-yourself:
            post:
              x-amazon-apigateway-request-validator: ValidateBody
              requestBody:
                required: true
                validateBody: true
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                        - age
                        - height
                        - income
                      properties:
                        age:
                          type: integer
                        height:
                          type: integer
                        income:
                          type: integer

              x-amazon-apigateway-integration:
                type: AWS
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${cyStoreDataFunction.Arn}/invocations
                passthroughBehavior: WHEN_NO_TEMPLATES
                integrationHttpMethod: POST
                requestTemplates:
                  # $input => request data (params, body)
                  # $ => request body
                  application/json: |
                    #set($inputRoot = $input.path('$'))
                    {
                      "age": $inputRoot.age,
                      "height": $inputRoot.height,
                      "income": $inputRoot.income
                    }
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''*'''
              responses:
                '200':
                  description: Successful operation
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                        type: object
            options:
              summary: CORS support
              x-amazon-apigateway-auth:
                type: "NONE"
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''*'''
            delete:
              responses:
                '200':
                  description: Successful operation
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                        type: object
              x-amazon-apigateway-integration:
                type: AWS
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${cyDeleteDataFunction.Arn}/invocations
                httpMethod: POST
                passthroughBehavior: WHEN_NO_MATCH
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''*'''
          /compare-yourself/{type}:
            get:
              x-amazon-apigateway-request-validator: ValidateParams
              parameters:
                - name: type
                  in: path
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: Successful operation
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/CompareDataArray'
              x-amazon-apigateway-integration:
                type: AWS
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${cyGetDataFunction.Arn}/invocations
                httpMethod: POST
                passthroughBehavior: WHEN_NO_TEMPLATES
                requestTemplates:
                  application/json: |
                    {
                      "type": "$input.params('type')"
                    }
                responses:
                  default:
                    statusCode: 200
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        [
                        #foreach($eleme in $inputRoot)
                        {
                         "age": $elem.age
                         "height": $elem.height
                         "income": $elem.income
                        }
                        #if($foreach.hasNext),#end
                        #end
                        ]
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''*'''
            options:
              summary: CORS support
              x-amazon-apigateway-auth: "NONE"
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''*'''
        components:
          schemas:
            CompareDataArray:
              type: array
              items:
                type: object
                required:
                  - age
                  - income
                  - height
                properties:
                  age:
                    type: number
                  height:
                    type: number
                  income:
                    type: number

  cyStoreDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers
      Handler: cy-store-data.cyStoreDataHandler
      Runtime: nodejs20.x
      FunctionName: cyStoreDataFunction
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref compareYourselfTable
      Environment:
        Variables:
          DYNAMO_TABLE_NAME: !Ref compareYourselfTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /compare-yourself
            Method: post
            RestApiId: !Ref ApiGatewayApi

  cyDeleteDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers
      FunctionName: cyDeleteDataFunction
      Handler: cy-delete-data.cyDeleteDataHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
            Resource: !GetAtt compareYourselfTable.Arn
      Environment:
        Variables:
          DYNAMO_TABLE_NAME: !Ref compareYourselfTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /compare-yourself
            Method: delete
            RestApiId: !Ref ApiGatewayApi

  cyGetDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers
      FunctionName: cyGetDataFunction
      Handler: cy-get-data.cyGetDataHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref compareYourselfTable
      Environment:
        Variables:
          DYNAMO_TABLE_NAME: !Ref compareYourselfTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /compare-yourself/{type}
            Method: get
            RestApiId: !Ref ApiGatewayApi

  cyCustomAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/authorizer
      FunctionName: cyCustomAuthFunction
      Handler: cy-custom-auth.cyCustomAuthHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30

  compareYourselfTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: compare-yourself-table
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH

Outputs:
  ApiEndpoint:
    Description: URL of the API endpoint
    Value: !Sub https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/compare-yourself
  TableName:
    Description: Table name
    Value: !Ref compareYourselfTable